/*
 * Copyright (c) 2024 - Felipe Desiderati
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package io.herd.common.data.jpa;

import jakarta.persistence.*;
import org.springframework.data.domain.Persistable;
import org.springframework.data.jpa.domain.AbstractPersistable;

import java.io.Serializable;

/**
 * Abstract class for JPA entities. We didn't use the {@link AbstractPersistable} class because it only
 * allows the configuration of an identifier using {@link GenerationType#AUTO} (It allows the persistence
 * provider to choose the most appropriate strategy according to the database).
 * <p>
 * Instead, we used the {@link GenerationType#IDENTITY} (We inform to the persistence provider that the
 * unique identifier will be generated by the database auto-increment column. Thus, an identifier is generated
 * for each record inserted in the bank. Some databases may not support this option).
 */
@MappedSuperclass
@SuppressWarnings("unused")
public abstract class AbstractPersistableIdentity<I extends Serializable> extends AbstractIdentity<I> implements Persistable<I>, Identity<I> {

    public AbstractPersistableIdentity() {
        this(null);
    }

    public AbstractPersistableIdentity(I id) {
        this.id = id;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private I id;

    @Override
    public final I getId() {
        return id;
    }

    protected void setId(final I id) {
        this.id = id;
    }

    /**
     * It needs to be {@link Transient} to ensure that the JPA provider does not complain about a missing setter.
     *
     * @see Persistable#isNew()
     */
    @Transient // DATAJPA-622
    public final boolean isNew() {
        return null == getId();
    }
}

