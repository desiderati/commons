#
# RESTful API Client Support
#
# If a default RESTful API client was created, we can decorate the requests made by it with the authentication header.
spring.web.http.clients.decorate-with-auth-header=false

#
# Web Security Support
#
# It defines if the GraphQL Servlet default path is secured or not. Useful for development environments,
# which we can use Voyager to show the GraphQL Schema without authentication.
spring.graphql.security.enabled=true

# If true, it enables the propagation of the security context to the asynchronous children threads.
spring.mvc.async.delegate-security-context=true

# It defines if the default Authentication is enabled or not.
spring.web.security.default.authentication.enabled=false

# Defines the default username for basic Spring Security authentication.
# This value is used when default authentication is enabled and no custom user has been configured.
#spring.security.user.name=user

# If not specified, a default one will be generated.
#spring.security.user.password=658bf49d-6140-4329-87f4-36572b6b97d9

# It defines if JWT Authentication is enabled or not. Process of retrieving the user/password
# from the Request Body and verifying if the password matches. Here we will get all roles
# configured for the user.
spring.web.security.jwt.authentication.enabled=false

# The RSA private key used for signing JWT tokens when using asymmetric encryption.
spring.web.security.jwt.authentication.keys.public-key=classpath:jwt.pub

# The RSA private key used for signing JWT tokens when using asymmetric encryption.
spring.web.security.jwt.authentication.keys.private-key=classpath:jwt.key

# The secret key used for both signing and verifying JWT tokens when using symmetric encryption.
spring.web.security.jwt.authentication.keys.secret-key=classpath:secret.key

# Sets the URL that determines if authentication is required.
spring.web.security.jwt.authentication.login-url=/login

# The period of time in which the JWT token expires or terminates, in hours (-1 means no expiration).
spring.web.security.jwt.authentication.expiration-period=1

# It defines the encryption method to be used to encrypt/decrypt the JWT Token. Possible values: asymmetric, symmetric.
spring.web.security.jwt.authentication.encryption-method=asymmetric

# It defines the parameter name that will be used to extract the authorities for the JWT Token.
spring.web.security.jwt.authentication.authorities.parameter=authorities

# It defines the parameter name that will be used to extract the information
# if a JWT Token was generated for an administrator user.
spring.web.security.jwt.authentication.authorities.parameter-administrator=administrator

# Set the HTTP methods to allow, e.g., GET, POST, etc. The special value '*' allows all methods.
spring.web.security.jwt.authentication.cors.allowed-methods=POST

# Set the list of headers that a preflight request can list as allowed for use during an actual request.
# The special value '*' may be used to allow all headers. By default, all headers are allowed.
spring.web.security.jwt.authentication.cors.allowed-headers=*

# The list of allowed origins that be specific origins, e.g. 'https://domain1.com', or '*' for all origins.
# By default, all origins are allowed.
spring.web.security.jwt.authentication.cors.allowed-origins=*

# Set the list of response headers other than 'simple', headers, i.e., Cache-Control, Content-Language,
# Content-Type, Expires, Last-Modified, or Pragma, that an actual response might have and can be exposed.
# Note that '*' is not supported on this property.
spring.web.security.jwt.authentication.cors.exposed-headers=Authorization

# It defines if JWT Authentication Delegation is enabled or not. The process of retrieving the user/password
# from the Request Body and verifying if the password matches, it is delegated to another API.
spring.web.security.jwt.authentication.delegation.enabled=false

# It defines the base path for the JWT Authentication Delegation API.
#spring.web.security.jwt.authentication.delegation.base-path=

# Sets the URL that determines if authentication is required for the JWT Authentication Delegation API.
spring.web.security.jwt.authentication.delegation.login-url=/login

# It defines if JWT Authorization is enabled or not.
spring.web.security.jwt.authorization.enabled=false

# It defines if Sign Request Authorization is enabled or not.
spring.web.security.sign-request.authorization.enabled=false

# Defines the client id.
#spring.web.security.sign-request.authorization.client.id=

# Defines the secret key associated with the client id, which will be used to sign the request.
#spring.web.security.sign-request.authorization.client.secret-key=

#
# OAuth2 Resource Server Customization
#
# JSON Web Algorithms used for verifying the digital signatures.
spring.security.oauth2.resourceserver.jwt.jws-algorithms=RS512

# Location of the file containing the public key used to verify a JWT.
spring.security.oauth2.resourceserver.jwt.public-key-location=${spring.web.security.jwt.authentication.keys.public-key}

# Prefix to use for authorities mapped from JWT. Blank by default!
spring.security.oauth2.resourceserver.jwt.authority-prefix=

# Prefix to use for authorities mapped from JWT.
spring.security.oauth2.resourceserver.jwt.authorities-claim-name=${spring.web.security.jwt.authentication.authorities.parameter}
