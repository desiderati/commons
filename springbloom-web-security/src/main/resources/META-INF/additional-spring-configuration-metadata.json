{
  "groups": [
    {
      "name": "spring.web.security.jwt.authentication.cors",
      "type": "dev.springbloom.web.configuration.CorsProperties"
    },
    {
      "name": "spring.web.security.sign-request.client",
      "type": "dev.springbloom.web.security.auth.sign.SignRequestClientProperties"
    }
  ],
  "properties": [
    {
      "name": "spring.graphql.security.enabled",
      "description": "It defines if the GraphQL Servlet default path will be secured or not. Useful for development environments, which we can use Voyager to show the GraphQL Schema without authentication.",
      "type": "java.lang.Boolean",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.async.delegate-security-context",
      "description": "If true, it enables the propagation of the security context to the asynchronous children threads.",
      "type": "java.lang.Boolean",
      "defaultValue": true
    },
    {
      "name": "spring.web.http.clients.decorate-with-auth-header",
      "description": "When a default RESTful API client is initialized, request interceptors can be applied to automatically append the Authorization header with a JWT token. This mechanism is only enabled when JWT-based authentication is configured.",
      "type": "java.lang.Boolean",
      "defaultValue": false
    },
    {
      "name": "spring.web.http.clients.decorate-with-sign-request-header",
      "description": "When a default RESTful API client is initialized, request interceptors can be applied to automatically append the Sign Request header. This mechanism is only enabled when Sign Request authorization is configured.",
      "type": "java.lang.Boolean",
      "defaultValue": false
    },
    {
      "name": "spring.web.security.form-based.authentication.enabled",
      "description": "It defines if the Form-Based Authentication will be enabled or not.",
      "type": "java.lang.Boolean",
      "defaultValue": false
    },
    {
      "name": "spring.web.security.http-basic.authorization.enabled",
      "description": "It defines if the HTTP Basic Authentication will be enabled or not.",
      "type": "java.lang.Boolean",
      "defaultValue": false
    },
    {
      "name": "spring.web.security.jwt.authentication.enabled",
      "description": "It defines if JWT Authentication will be enabled or not. Process of retrieving the user/password from the Request Body and verifying if the password matches. Here we will obtain all roles configured for the user.",
      "type": "java.lang.Boolean",
      "defaultValue": false
    },
    {
      "name": "spring.web.security.jwt.authentication.issuer",
      "description": "Defines the issuer of the JWT tokens used for authentication. This value is included in the \"iss\" claim of each token and validated by the Resource Server.",
      "type": "java.lang.String"
    },
    {
      "name": "spring.web.security.jwt.authentication.audience",
      "description": "Defines the expected audience value in the JWT, separating multiple values by comma. This value is included in the \"aud\" claim of each token and ensures the JWT token was issued for the right service.",
      "type": "java.lang.String"
    },
    {
      "name": "spring.web.security.jwt.authentication.authorities.parameter",
      "description": "It defines the parameter name that will be used to extract the authorities for the JWT Token.",
      "type": "java.lang.String",
      "defaultValue": "authorities"
    },
    {
      "name": "spring.web.security.jwt.authentication.authorities.parameter-administrator",
      "description": "It defines the parameter name that will be used to extract the information if a JWT Token was generated for an administrator user.",
      "type": "java.lang.String",
      "defaultValue": "administrator"
    },
    {
      "name": "spring.web.security.jwt.authentication.base-path-login",
      "description": "Sets the URL that determines if authentication is required.",
      "type": "java.lang.String",
      "defaultValue": "/authenticate"
    },
    {
      "name": "spring.web.security.jwt.authentication.expiration-period",
      "description": "The period of time in which the JWT token expires or terminates in hours (-1 means no expiration).",
      "type": "java.lang.Integer",
      "defaultValue": 1
    },
    {
      "name": "spring.web.security.jwt.authentication.encryption-method",
      "description": "It defines the encryption method to be used to encrypt/decrypt the JWT Token. Possible values: asymmetric, symmetric.",
      "type": "dev.springbloom.web.security.auth.jwt.JwtEncryptionMethod",
      "defaultValue": "asymmetric"
    },
    {
      "name": "spring.web.security.jwt.authentication.cors.allowed-methods",
      "description": "Set the HTTP methods to allow, e.g. GET, POST, etc. The special value '*' allows all methods.",
      "type": "java.lang.String",
      "defaultValue": ["POST"]
    },
    {
      "name": "spring.web.security.jwt.authentication.cors.allowed-headers",
      "type": "java.lang.String",
      "description": "Set the list of headers that a preflight request can list as allowed for use during an actual request. The special value '*', may be used to allow all headers. By default all headers are allowed.",
      "defaultValue": ["*"]
    },
    {
      "name": "spring.web.security.jwt.authentication.cors.allowed-origins",
      "description": "The list of allowed origins that be specific origins, e.g. 'https://domain1.com', or '*' for all origins. By default, all origins are allowed.",
      "type": "java.lang.String",
      "defaultValue": ["*"]
    },
    {
      "name": "spring.web.security.jwt.authentication.cors.exposed-headers",
      "description": "Set the list of response headers other than 'simple', headers, i.e. Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, or Pragma, that an actual response might have and can be exposed. Note that '*' is not supported on this property.",
      "type": "java.lang.String",
      "defaultValue": ["Authorization"]
    },
    {
      "name": "spring.web.security.jwt.authentication.delegation.enabled",
      "description": "It defines if JWT Authentication Delegation will be enabled or not. Process of retrieving the user/password from the Request Body and verifying if the password matches is delegated to another API.",
      "type": "java.lang.Boolean",
      "defaultValue": false
    },
    {
      "name": "spring.web.security.jwt.authentication.delegation.base-path-url",
      "description": "It defines the base path for the JWT Authentication Delegation API. Must be defined if authentication delegation is enabled.",
      "type": "java.lang.String"
    },
    {
      "name": "spring.web.security.jwt.authentication.delegation.base-path-login",
      "description": "Sets the URL that determines if authentication is required for the JWT Authentication Delegation API.",
      "type": "java.lang.String",
      "defaultValue": "/authenticate"
    },
    {
      "name": "spring.web.security.jwt.authorization.enabled",
      "description": "It defines if JWT Authorization will be enabled or not.",
      "type": "java.lang.Boolean",
      "defaultValue": false
    },
    {
      "name": "spring.web.security.sign-request.authorization.enabled",
      "description": "It defines if Sign Request Authorization will be enabled or not.",
      "type": "java.lang.Boolean",
      "defaultValue": false
    },
    {
      "name": "spring.web.security.sign-request.client.id",
      "description": "Defines the client id.",
      "type": "java.util.UUID"
    },
    {
      "name": "spring.web.security.sign-request.client.secret-key",
      "description": "Defines the secret key associated with the client id, which will be used to sign the request.",
      "type": "java.lang.String"
    }
  ]
}
